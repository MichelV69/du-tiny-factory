{"slots":{"0":{"name":"slot1","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-3":{"name":"player","type":{"events":[],"methods":[]}},"-2":{"name":"construct","type":{"events":[],"methods":[]}},"-4":{"name":"system","type":{"events":[],"methods":[]}},"-5":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"unit.hideWidget()\n\nfeed_multiplier = 1 -- how much extra to be produced and kept waiting in the feeder bin\nline_multiplier = 1 -- how much extra should be produced waiting to be transferred to feeder bin (will max at 1000)\nnum_lines       = 2 -- the number of linecook support lines\n\nitems = {}\nline_mins = {}\nline_mins[2240749601] = 300 -- pure aluminum\nline_mins[159858782] = 300 -- pure carbon\nline_mins[198782496] = 300 -- pure iron\nline_mins[2589986891] = 300 -- pure silicon\n\nline_mins[2112763718] = 200 -- pure calcium\nline_mins[2147954574] = 200 -- pure chromium\nline_mins[1466453887] = 200 -- pure copper\nline_mins[3603734543] = 200 -- pure sodium\n\nline_mins[3810111622] = 100 -- pure lithium\nline_mins[3012303017] = 100 -- pure nickel\nline_mins[1807690770] = 100 -- pure silver\nline_mins[3822811562] = 100 -- pure sulfur\n\ndont_assign = { -- list of raw minerals, these can't be produced, so they need to be ignored\n    299255727, -- coal\n    4234772167, -- hematite\n    262147665, -- bauxite\n    3724036288, -- quartz\n\n    2029139010, -- chromite\n    3086347393, -- limestone\n    2289641763, -- malachite\n    343766315, -- natron\n\n    1050500112, -- acanthite\n    1065079614, -- garnierette\n    3837858336, -- petalite\n    4041459743, -- pyrite\n\n    3546085401, -- cobaltite\n    1467310917, -- cryolite\n    1866812055, -- gold nuggets\n    271971371, -- kolbeckite\n\n    789110817, -- columbite\n    629636034, -- ilmenite\n    3934774987, -- rhodonite\n    2162350405, -- vanadinite\n}\nignore_list = {} -- will be populated by the dont_assign list\n\nfunction next() \n    time = math.floor(system.getArkTime())\n\n    out(\"status checking... \", time)\n\n    for name, slot in pairs(buttons) do\n        timeping = databank.getIntValue(\"ping:\" .. name)\n        if (time - timeping) > 30 then \n            slot.deactivate() \n            databank.clearValue(\"status:\" .. name)\n            out(\"toggling\", name)\n        end -- turn it off, let the buttonOn timer turn it back on\n    end\nend\n\nfunction getIngredients(items, base, recurse)\n    local new = false\n\n    if base == nil then base = {} end\n    local ingredients = base\n    if recurse then ingredients = items end\n\n    repeat\n        new = false\n        for _, item in pairs(items) do\n            local item_id = item.id\n\n            -- determine what we will need to build the item\n            local recipes = system.getRecipes(item_id)\n            local time_multiplier = 1\n\n            if recipes and recipes[1] then\n                local recipe = recipes[1]\n                time_multiplier = math.ceil(300 / recipe.time) -- lua recipe.time is base time, but skills might allow you to make much more in less time, try to accomodate this\n\n                local inputs = recipe.ingredients\n                for _, input_item in pairs(inputs) do\n                    if ignore_list[item.id] ~= true then\n                        if ingredients[input_item.id] == nil then \n                            ingredients[input_item.id] = {id= input_item.id, quantity= 0}\n                            new = true\n                        end\n\n                        quantity = math.ceil(math.max(input_item.quantity * time_multiplier, ingredients[input_item.id].quantity))\n                        if recurse == false then quantity = math.ceil(quantity / num_lines) end\n                        if line_mins[input_item.id] then \n                            quantity = math.max(line_mins[input_item.id], quantity)\n                        end\n\n                        ingredients[input_item.id].quantity = math.max(quantity, ingredients[input_item.id].quantity)\n                    end\n                end\n            end\n        end\n    until(recurse == false or new == false) \n\n    return ingredients\nend\n\n\nfunction getName(id) \n    if id == nil then return \"nil Id\" end\n    if names[id] == nil then\n        name = system.getItem(id).locDisplayNameWithSize\n        name = name:gsub(\" xs$\", \" XS\")\n        name = name:gsub(\" s$\", \" S\")\n        name = name:gsub(\" m$\", \" M\")\n        name = name:gsub(\" l$\", \" L\")\n        name = name:gsub(\" xl$\", \" XL\")\n        name = name:gsub(\" product$\", \" Product\")\n        names[id] = name\n    end\n    return names[id]\nend\n\nfunction addBuild(id, quantity, is_input)\n    if id == nil or quantity == nil then\n        out(\"id or quantity can not be nil\", id, quantity)\n        return\n    end\n    local new = false\n\n    if builds[id] == nil then \n        builds[id] = {id= id}\n        new = true\n    end\n    builds[id].quantity = math.ceil(quantity)\n\n    return new\nend\n\nfunction saveTable(name, table)\n    databank.clearValue(name)\n    local raw = json.encode(table)\n    databank.setStringValue(name, raw)\n    if databank.getStringValue(name) ~= raw then\n        out(\"Unable to save to databank\")\n        unit.exit()\n    end\nend\n\ndatabank = nil\nbuttons = {}\nnames = {}\nbuilds = {}\nactivated = {}\nscreen = nil\nbutton_names = {}\n\nfor slot_name, slot in pairs(unit) do\n    if type(slot) == \"table\" and type(slot.export) == \"table\" and slot.getClass then\n        slotClass = slot.getClass():lower()\n        if slotClass == 'databankunit' then\n            databank = slot\n        elseif slotClass:sub(0,8) == \"industry\" then\n            slotId = slot.getLocalId()\n            industry = {\n                id=slotId,\n                slot=slot\n            }\n            table.insert(industries, industry)\n        elseif slotClass == \"manualswitchunit\" then\n            buttons[slot.getName()] = slot\n            table.insert(button_names, slot.getName())\n        end\n    end\nend\n\norders = json.decode(databank.getStringValue(\"orders\"))\nif orders == \"\" then orders = {} end\nfor id, quantity in pairs(orders) do\n    items[tonumber(id)] = quantity\nend\norders = nil\n\nfor name, slot in pairs(buttons) do\n    slot.deactivate()\n    if databank then databank.clearValue(\"status:\" .. name) end\nend\n\nfor _, id in pairs(dont_assign) do\n    databank.setStringValue(\"industry:\" .. id, \"-\")\n    databank.setStringValue(\"known:\" .. id, \"-\")\n    ignore_list[id] = true\nend\n\nfor id, qty in pairs(items) do\n    addBuild(id, qty, \"false\")\nend\n\n-- save the main builds\nsaveTable(\"chef\", builds)\n\n-- all items added, now determine immediate ingredients to build each item\ningredients = getIngredients(builds, {}, false)\nsaveTable(\"waitress\", ingredients)\n\n-- immediate ingredients added, now determine all ingredients needed to build ingredients and required items\ningredients = getIngredients(ingredients, ingredients, true)\nsaveTable(\"linecook\", ingredients)\n\nunit.setTimer(\"buttonsOn\", 2.5)\nunit.setTimer(\"next\", 20)\n","filter":{"args":[],"signature":"onStart()","slotKey":"-1"},"key":"0"},{"code":"next()","filter":{"args":[{"value":"next"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"1"},{"code":"for _, button in pairs(buttons) do\n   button.deactivate()\nend\n\n","filter":{"args":[],"signature":"onStop()","slotKey":"-1"},"key":"2"},{"code":"for name, button in pairs(buttons) do\n    if button.isActive() == 0 then \n        button.activate() \n        return\n    end \nend\n","filter":{"args":[{"value":"buttonsOn"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"3"},{"code":"function clean(param)\n    if param == nil then return \" \" end\n    return param\nend\n\nfunction out(a,b,c,d)\n    system.print(clean(a) .. \" \" .. clean(b) .. \" \" .. clean(c) .. \" \" .. clean(d))\nend","filter":{"args":[],"signature":"onStart()","slotKey":"-5"},"key":"4"}],"methods":[],"events":[]}
