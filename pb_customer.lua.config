{"slots":{"0":{"name":"databank","type":{"events":[],"methods":[]}},"1":{"name":"manager","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-3":{"name":"player","type":{"events":[],"methods":[]}},"-2":{"name":"construct","type":{"events":[],"methods":[]}},"-4":{"name":"system","type":{"events":[],"methods":[]}},"-5":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"-- don't edit\nmanager.activate()\nunit.stopTimer(\"on\")\n","filter":{"args":[{"value":"on"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"0"},{"code":"-- don't edit\nmanager.deactivate()\nmanager.deactivate() -- because one isn't enough sometimes\nmanager.deactivate() -- because one isn't enough sometimes","filter":{"args":[],"signature":"onStop()","slotKey":"-1"},"key":"1"},{"code":"-- https://github.com/squizzlabs/du-tiny-factory\n-- For the latest versions of pb and screen software, freely avialable.\n\nitems = {} -- don't modify this line\n\n--[[\nInstructions:\n\nto add an item, look it up by name on https://du-lua.dev/#/items\nand enter the value below as you see in the examples.\nLeft side is the item id, right side is the item quantity.\nThen turn this unit on!  The programming boards will work together to handle the rest\n\nWhen you change any of the item values, turn this unit off and \nthen back on for changes to take effect.\n]]\n\n-- some example basic items for testing each assembly line\nitems[1727614690] = 1 -- wing xs\nitems[2532454166] = 1 -- wing s\nitems[404188468] = 1 -- wing m\nitems[2375915630] = 1 -- atmo engine l\n\n-- some example complicated items for testing your new Tiny Factory\nitems[286542481] = 1 -- emergency control unit xs\nitems[184261427] = 1 -- screen xs\nitems[1866437084] = 1 -- remote controller xs\nitems[3663249627] = 2 -- elevator xs]]\n\n\n-- some really complicated items!\n-- items[774130122] = 1 -- maintenance unit xl\n-- items[2643443936] = 1 -- warp drive l\n\n--[[\nPLEASE NOTE!\n\nIf you're looking to produce fuels, honeycombs, warp cells, etc. the current\nconfiguration does not support this.  You can set this up manually, however, by \nremoving an assembler of your choice and replacing it with the proper industry.  Link this\nnew industry to the chef (top pb under the pedestal), link the two line hubs as inputs, and\nthe output as the output.  Be sure to restart the main board on top of the pedestal.\n]]\n\n-- don't modify the following\ndatabank_clear = false --global clear the databank next time this starts\nif databank_clear == true then databank.clear() end\n\ndatabank.setStringValue(\"orders\", json.encode(items))\nmanager.deactivate()\nunit.setTimer(\"on\", 0.1)\n\n","filter":{"args":[],"signature":"onStart()","slotKey":"-1"},"key":"2"}],"methods":[],"events":[]}
